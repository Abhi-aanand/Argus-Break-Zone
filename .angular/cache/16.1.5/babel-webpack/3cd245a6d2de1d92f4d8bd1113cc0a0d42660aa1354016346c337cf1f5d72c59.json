{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport * as saveAs from 'file-saver';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nexport let ManageOrderComponent = class ManageOrderComponent {\n  constructor(formBulider, categoryService, productService, billService, dialog, SnackbarService, router) {\n    this.formBulider = formBulider;\n    this.categoryService = categoryService;\n    this.productService = productService;\n    this.billService = billService;\n    this.dialog = dialog;\n    this.SnackbarService = SnackbarService;\n    this.router = router;\n    this.displayedColumns = ['name', 'category', 'price', 'quantity', 'total', 'edit'];\n    this.dataSource = [];\n    this.manageOrderForm = FormGroup;\n    this.categorys = [];\n    this.products = [];\n    this.totalAmount = 0;\n  }\n  ngOnInit() {\n    this.getCategorys();\n    this.manageOrderForm = this.formBulider.group({\n      name: [null, [Validators.required, Validators.pattern(GlobalConstants.nameRegex)]],\n      email: [null, [Validators.required, Validators.pattern(GlobalConstants.emailRegex)]],\n      contactNumber: [null, [Validators.required]],\n      paymentMethod: [null, [Validators.required]],\n      product: [null, [Validators.required]],\n      category: [null, [Validators.required]],\n      quantity: [null, [Validators.required]],\n      price: [null, [Validators.required]],\n      total: [0, [Validators.required]]\n    });\n  }\n  getCategorys() {\n    this.categoryService.getFilteredCategorys().subscribe(response => {\n      this.categorys = response;\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  getProductsByCategory(value) {\n    this.productService.getProductByCategory(value.id).subscribe(response => {\n      this.products = response;\n      this.manageOrderForm.controls['price'].setValue('');\n      this.manageOrderForm.controls['quantity'].setValue('');\n      this.manageOrderForm.controls['total'].setValue(0);\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  getProductDetails(value) {\n    //console.log(\"inside getProductDetails\");\n    this.productService.getById(value.id).subscribe(response => {\n      this.price = response.price;\n      this.manageOrderForm.controls['price'].setValue(response.price);\n      this.manageOrderForm.controls['quantity'].setValue('1');\n      this.manageOrderForm.controls['total'].setValue(this.price * 1);\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  setQuantity(value) {\n    var temp = this.manageOrderForm.controls['quantity'].value;\n    if (temp > 0) {\n      this.manageOrderForm.controls['total'].setValue(this.manageOrderForm.controls['quantity'].value * this.manageOrderForm.controls['price'].value);\n    } else if (temp != '') {\n      this.manageOrderForm.controls['quantity'].setValue('1');\n      this.manageOrderForm.controls['total'].setValue(this.manageOrderForm.controls['quantity'].value * this.manageOrderForm.controls['price'].value);\n    }\n  }\n  validateProductAdd() {\n    var fromData = this.manageOrderForm.value;\n    //var totalValue = this.manageOrderForm.contols['total'].value;\n    var Value = this.manageOrderForm.controls['price'].value;\n    if (Value === null || fromData?.product?.total === 0 || fromData?.product?.total === '' || fromData?.product?.quantity <= 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  validateSubmit() {\n    var formData = this.manageOrderForm.value;\n    if (this.totalAmount === 0 || formData.product.name === null || this.manageOrderForm.controls['email'].value === null || formData.contactNumber === null || formData.paymentMethod === null) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  add() {\n    var fromData = this.manageOrderForm.value;\n    var productName = this.dataSource.find(e => e.id === fromData.product.id);\n    if (productName === undefined) {\n      this.totalAmount = this.totalAmount + fromData.total;\n      this.dataSource.push({\n        id: fromData.product.id,\n        name: fromData.product.name,\n        category: fromData.category.name,\n        quantity: fromData.quantity,\n        price: fromData.price,\n        total: fromData.total\n      });\n      this.dataSource = [...this.dataSource];\n      //alert(\"Order Added Successfully\");\n      this.SnackbarService.openSnackBar(GlobalConstants.productAdded, \"Success\");\n    } else {\n      this.SnackbarService.openSnackBar(GlobalConstants.productExistError, GlobalConstants.error);\n    }\n  }\n  handleDeleteAction(value, element) {\n    this.totalAmount = this.totalAmount = element.total;\n    this.dataSource.splice(value, 1);\n    this.dataSource = [...this.dataSource];\n  }\n  submitAction() {\n    var formData = this.manageOrderForm.value;\n    var data = {\n      name: formData.name,\n      email: formData.email,\n      contactNumber: formData.contactNumber,\n      paymentMethod: formData.paymentMethod,\n      totalAmount: this.totalAmount.toString(),\n      productDetails: JSON.stringify(this.dataSource)\n    };\n    this.billService.generateReport(data).subscribe(resonse => {\n      this.downloadFile(resonse?.uuid);\n      this.manageOrderForm.reset();\n      this.dataSource = [];\n      this.totalAmount = 0;\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  downloadFile(fileName) {\n    var data = {\n      uuid: fileName\n    };\n    this.billService.getPdf(data).subscribe(resonse => {\n      saveAs(resonse, fileName + \".pdf\");\n    });\n  }\n};\nManageOrderComponent = __decorate([Component({\n  selector: 'app-manage-order',\n  templateUrl: './manage-order.component.html',\n  styleUrls: ['./manage-order.component.scss']\n})], ManageOrderComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}