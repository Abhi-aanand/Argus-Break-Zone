{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport { ConfirmationComponent } from '../dialog/view-bill-products/confirmation/confirmation.component';\nimport { ProductComponent } from '../dialog/view-bill-products/product/product.component';\nexport let ManageProductComponent = class ManageProductComponent {\n  constructor(productService, dialog, SnackbarService, router) {\n    this.productService = productService;\n    this.dialog = dialog;\n    this.SnackbarService = SnackbarService;\n    this.router = router;\n    this.displayedColumns = ['name', 'categoryName', 'description', 'price', 'edit'];\n  }\n  ngOnInit() {\n    this.tableData();\n  }\n  tableData() {\n    this.productService.getProducts().subscribe(response => {\n      this.dataSource = new MatTableDataSource(response);\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  handleAddAction() {\n    const dialogConfog = new MatDialogConfig();\n    dialogConfog.data = {\n      action: 'Add'\n    };\n    dialogConfog.width = \"850px\";\n    const dialogRef = this.dialog.open(ProductComponent, dialogConfog);\n    this.router.events.subscribe(() => {\n      dialogRef.close();\n    });\n    const sub = dialogRef.componentInstance.onAddProduct.subscribe(response => {\n      this.tableData();\n    });\n  }\n  handleEditAction(values) {\n    const dialogConfog = new MatDialogConfig();\n    dialogConfog.data = {\n      action: 'Edit',\n      data: values\n    };\n    dialogConfog.width = \"850px\";\n    const dialogRef = this.dialog.open(ProductComponent, dialogConfog);\n    this.router.events.subscribe(() => {\n      dialogRef.close();\n    });\n    const sub = dialogRef.componentInstance.onEditProduct.subscribe(response => {\n      this.tableData();\n    });\n  }\n  handleDeleteAction(values) {\n    const dialogConfog = new MatDialogConfig();\n    dialogConfog.data = {\n      message: 'delete ' + values.name + ' product ',\n      confirmation: true\n    };\n    const dialogRef = this.dialog.open(ConfirmationComponent, dialogConfog);\n    const sub = dialogRef.componentInstance.onEmistStatusChange.subscribe(response => {\n      this.deleteProduct(values.id);\n      dialogRef.close();\n    });\n  }\n  deleteProduct(id) {\n    this.productService.delete(id).subscribe(response => {\n      this.tableData();\n      this.responseMessage = response?.message;\n      //alert(\"Product is Deleted\");\n      this.SnackbarService.openSnackBar(this.responseMessage, \"success\");\n    }, error => {\n      console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n  onChange(status, id) {\n    var data = {\n      status: status.toString(),\n      id: id\n    };\n    this.productService.updateStatus(data).subscribe(response => {\n      this.responseMessage = response?.message;\n      this.SnackbarService.openSnackBar(this.responseMessage, \"success\");\n    }, error => {\n      //console.log(error.error?.message);\n      if (error.error?.message) {\n        this.responseMessage = error.error?.message;\n      } else {\n        //alert(\"status is updated successfully\");\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.SnackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n    });\n  }\n};\nManageProductComponent = __decorate([Component({\n  selector: 'app-manage-product',\n  templateUrl: './manage-product.component.html',\n  styleUrls: ['./manage-product.component.scss']\n})], ManageProductComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}